{
    // Day to Day structures

    "PHP_full_tag": {
        "prefix": "php",
        "body": [
            "<?php $0?>"
        ],
        "description": "PHP open tag"
    },
    "PHP_open_tag": {
        "prefix": "po",
        "body": [
            "<?php"
        ],
        "description": "PHP open tag"
    },
    "PHP_close_tag": {
        "prefix": "pc",
        "body": [
            "?>"
        ],
        "description": "PHP close tag"
    },
    "PHP_echo_tag": {
        "prefix": "peco",
        "body": [
            "<?= $${1:variable} ?>"
        ],
        "description": "PHP echo tag"
    },
    "define": {
        "prefix": "def",
        "body": [
            "define(\"${1:CONST}\", \"${2:value}\");"
        ],
        "description": "'define' statement"
    },
    "include": {
        "prefix": "inc",
        "body": [
            "include \"${1:path_to_filename}\";"
        ],
        "description": "'include' statement"
    },
    "include_once": {
        "prefix": "inco",
        "body": [
            "include_once \"${1:path_to_filename}\";"
        ],
        "description": "'include_once' statement"
    },
    "require": {
        "prefix": "rqr",
        "body": [
            "require \"${1:path_to_filename}\";"
        ],
        "description": "'require' statement"
    },
    "require_once": {
        "prefix": "rqro",
        "body": [
            "require_once \"${1:path_to_filename}\";"
        ],
        "description": "'require_once' statement"
    },
    "function": {
        "prefix": "fn",
        "body": [
            "function ${1:func_name}(${2:Type} $${3:variable}): ${4:void} {",
            "\t${0:# code...}",
            "}"
        ],
        "description": "Function Block"
    },
    "function_PHP5": {
        "prefix": "fn5",
        "body": [
            "function ${1:func_name}($${2:variable}) {",
            "\t${0:# code...}",
            "}"
        ],
        "description": "Function Block for PHP5"
    },
    "echo": {
        "prefix": "eco",
        "body": [
            "echo \"${1:text}\";"
        ],
        "description": "'echo' statement"
    },
    "if_endif": {
        "prefix": "ifend",
        "body": [
            "if (${1:condition}):",
            "\t${0:# code...}",
            "endif;"
        ],
        "description": "If endif Block"
    },
    "if_else_endif": {
        "prefix": "ifelend",
        "body": [
            "if (${1:condition}):",
            "\t${2:# code...}",
            "else:",
            "\t${0:# code...}",
            "endif;"
        ],
        "description": "If else endif Block"
    },
    "if_else_if_endif": {
        "prefix": "ifelifend",
        "body": [
            "if (${1:condition}):",
            "\t${2:# code...}",
            "elseif (${2:condition}):",
            "\t${3:# code...}",
            "else:",
            "\t${0:# code...}",
            "endif;"
        ],
        "description": "If elseif else endif Block"
    },
    "if_block": {
        "prefix": "ifb",
        "body": [
            "if (${1:condition}) {",
            "\t${0:# code...}",
            "}"
        ],
        "description": "If  Block"
    },
    "if_else": {
        "prefix": "ifel",
        "body": [
            "if (${1:condition}) {",
            "\t${2:# code...}",
            "} else {",
            "\t${0:# code...}",
            "}"
        ],
        "description": "If else Block"
    },
    "if_else_if": {
        "prefix": "ifelif",
        "body": [
            "if (${1:condition}) {",
            "\t${2:# code...}",
            "} elseif(${3:condition}) {",
            "\t${4:# code...}",
            "} else {",
            "\t${0:# code...}",
            "}"
        ],
        "description": "If elseif Block"
    },
    "ternary_operator": {
        "prefix": "tern",
        "body": [
            "${1:condition} ? ${2:if_true} : ${3:if_false};"
        ],
        "description": "Ternary statement"
    },
    "foreach": {
        "prefix": "fore",
        "body": [
            "foreach ($${1:iterable} as $${2:item}) {",
            "\t${0:# code...}",
            "}"
        ],
        "description": "Foreach as $item Block"
    },
    "foreach_key": {
        "prefix": "forek",
        "body": [
            "foreach ($${1:iterable} as $${2:key} => $${3:item}) {",
            "\t${0:# code...}",
            "}"
        ],
        "description": "Foreach as $key => $item Block"
    },
    "foreach_end": {
        "prefix": "foren",
        "body": [
            "foreach ($${1:iterable} as $${2:item}):",
            "\t${0:# code...}",
            "endforeach;"
        ],
        "description": "Foreach end as $item Block"
    },
    "foreach_end_key": {
        "prefix": "forenk",
        "body": [
            "foreach ($${1:iterable} as $${2:key} => $${3:item}):",
            "\t${0:# code...}",
            "endforeach;"
        ],
        "description": "Foreach end as $key => $item Block"
    },
    "for_loop": {
        "prefix": "forl",
        "body": [
            "for ($${1:i} = ${2:0}; $${1:i} < $${3:limit}; $${1:i}++) {",
            "\t${0:# code...}",
            "}"
        ],
        "description": "For Loop"
    },
    "for_end_loop": {
        "prefix": "forlen",
        "body": [
            "for ($${1:i} = ${2:0}; $${1:i} < $${3:limit}; $${1:i}++):",
            "\t${0:# code...}",
            "endfor;"
        ],
        "description": "For end Loop"
    },
    "while_loop": {
        "prefix": "wl",
        "body": [
            "while ($${1:variable} <= ${2:10}) {",
            "\t${0:# code...}",
            "}"
        ],
        "description": "While Loop"
    },
    "while_end": {
        "prefix": "wlen",
        "body": [
            "while ($${1:variable} <= ${2:10}):",
            "\t${0:# code...}",
            "endwhile;"
        ],
        "description": "While end Loop"
    },
    "do_while": {
        "prefix": "dowl",
        "body": [
            "do {",
            "\t${0:# code...}",
            "} while ($${1:variable} <= ${2:10});"
        ],
        "description": "Do while Block"
    },
    "switch": {
        "prefix": "sw",
        "body": [
            "switch ($${1:condition}) {",
            "\tcase ${2:label}:",
            "\t\t${3:# code...}",
            "\t\tbreak;",
            "\tcase ${4:label}:",
            "\t\t${0:# code...}",
            "\t\tbreak;",
            "\tdefault:",
            "}"
        ],
        "description": "switch"
    },



    // PHP class Snippets
    "Class constructor": {
        "prefix": "_c",
        "body": [
            "public function __construct(${1:parameters})",
            "{",
            "\t${0:# code...}",
            "}"
        ],
        "description": "Class Constructor Block"
    },
    "private_function": {
        "prefix": "prif",
        "body": [
            "private function ${1:func_name}(${2:parameters}): ${3:void}",
            "{",
            "\t${0:# code...}",
            "}"
        ],
        "description": "Private function Block"
    },
    "private_static_function": {
        "prefix": "prisf",
        "body": [
            "private static function ${1:func_name}(${2:parameters}): ${3:void}",
            "{",
            "\t${0:# code...}",
            "}"
        ],
        "description": "Private static function Block"
    },
    "protected_function": {
        "prefix": "prof",
        "body": [
            "protected function ${1:func_name}(${2:parameters}): ${3:void}",
            "{",
            "\t${0:# code...}",
            "}"
        ],
        "description": "Protected function Block"
    },
    "protected_static_function": {
        "prefix": "prosf",
        "body": [
            "protected static function ${1:func_name}(${2:parameters}): ${3:void}",
            "{",
            "\t${0:# code...}",
            "}"
        ],
        "description": "Protected static function Block"
    },
    "public_function": {
        "prefix": "pubf",
        "body": [
            "public function ${1:func_name}(${2:parameters}): ${3:void}",
            "{",
            "\t${0:# code...}",
            "}"
        ],
        "description": "Public function Block"
    },
    "public_static_function": {
        "prefix": "pubsf",
        "body": [
            "public static function ${1:func_name}(${2:parameters}): ${3:void}",
            "{",
            "\t${0:# code...}",
            "}"
        ],
        "description": "Public static function Block"
    },

    "private_function_PHP5": {
        "prefix": "prif5",
        "body": [
            "private function ${1:func_name}(${2:parameters})",
            "{",
            "\t${0:# code...}",
            "}"
        ],
        "description": "Private function Block for PHP5"
    },
    "private_static_function_PHP5": {
        "prefix": "prisf5",
        "body": [
            "private static function ${1:func_name}(${2:parameters})",
            "{",
            "\t${0:# code...}",
            "}"
        ],
        "description": "Private static function Block for PHP5"
    },
    "protected_function_PHP5": {
        "prefix": "prof5",
        "body": [
            "protected function ${1:func_name}(${2:parameters})",
            "{",
            "\t${0:# code...}",
            "}"
        ],
        "description": "Protected function Block for PHP5"
    },
    "protected_static_function_PHP5": {
        "prefix": "prosf5",
        "body": [
            "protected static function ${1:func_name}(${2:parameters})",
            "{",
            "\t${0:# code...}",
            "}"
        ],
        "description": "Protected static function Block for PHP5"
    },
    "public_function_PHP5": {
        "prefix": "pubf5",
        "body": [
            "public function ${1:func_name}(${2:parameters})",
            "{",
            "\t${0:# code...}",
            "}"
        ],
        "description": "Public function Block for PHP5"
    },
    "public_static_function_PHP5": {
        "prefix": "pubsf5",
        "body": [
            "public static function ${1:func_name}(${2:parameters})",
            "{",
            "\t${0:# code...}",
            "}"
        ],
        "description": "Public static function Block for PHP5"
    },
    "try_catch": {
        "prefix": "tr",
        "body": [
            "try {",
            "\t${1:# code...}",
            "} catch (${2:\\Throwable} $${3:e}) {",
            "\t${0:# code...}",
            "}"
        ],
        "description": "Try catch Block"
    },
    "throw_new_exception": {
        "prefix": "thr",
        "body": [
            "throw new ${1:\\Exception}(\"${2:Error message}\");"
        ],
        "description": "Throw new exception statement"
    },

    //Global Variables access
    "globals": {
        "prefix": "$G",
        "body": [
            "$GLOBALS[\"${1:name}\"]"
        ],
        "description": "globals"
    },
    "server": {
        "prefix": "$se",
        "body": [
            "$_SERVER[\"${1:name}\"]"
        ],
        "description": "server"
    },
    "request": {
        "prefix": "$r",
        "body": [
            "$_REQUEST[\"${1:name}\"]"
        ],
        "description": "request"
    },
    "post": {
        "prefix": "$p",
        "body": [
            "$$_POST[\"${1:name}\"]"
        ],
        "description": "post"
    },
    "get": {
        "prefix": "$g",
        "body": [
            "$$_GET[\"${1:name}\"]"
        ],
        "description": "get"
    },
    "files": {
        "prefix": "$f",
        "body": [
            "$$_FILES[\"${1:name}\"]"
        ],
        "description": "files"
    },
    "env": {
        "prefix": "$e",
        "body": [
            "$$_ENV[\"${1:name}\"]"
        ],
        "description": "env"
    },
    "cookie": {
        "prefix": "$c",
        "body": [
            "$$_COOKIE[\"${1:name}\"]"
        ],
        "description": "cookie"
    },
    "session": {
        "prefix": "$s",
        "body": [
            "$$_SESSION[\"${1:name}\"]"
        ],
        "description": "session"
    },
}